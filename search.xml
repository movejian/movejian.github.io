<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vscode配置picgo的github的图床</title>
    <url>/2022/08/19/vscode%E9%85%8D%E7%BD%AEpicgo%E7%9A%84github%E7%9A%84%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>vscode+github+picgo 搭建 markdown 图床</p>
<p>一、vscode 配置<br>1、安装 Markdown All in One 插件<br>Markdown All in One 插件作为 Markdown 编辑器非常好用，既可以预览，对语法的支持也非常好。</p>
<p>2、安装 markdownlint 插件<br>这是个功能强大的 Markdown 语法检查器，可以帮助你书写出规范的文档，同时避免书写错误导致文档无法渲染。<br>markdownlint 制定了很多书写规范，如果不按照它的规范编写文章，则会提示很多错误或警告。</p>
<span id="more"></span>

<p>3、安装 picgo 插件<br>可以下载 picgo 客户端来使用，但是这里直接在 vscode 中下载 picgo 插件也是可以的，只需要配置一下，配置方法在文章后面。</p>
<p>二、GitHub 配置<br>1、创建一个仓库，必须为public</p>
<p><img src="https://movejian.github.io/images/20220819/picgo1.png"></p>
<p><img src="https://movejian.github.io/images/20220819/picgo1.png"></p>
<p>2、获取  Tokens</p>
<p>① 进入个人设置页面，依次选择 【Developer settings】 –&gt; 【Personal access tokens】，然后点击【Generate new token】来生成新的 tokens，此 token是上传时验证身份用的。</p>
<p>注意：这个【Developer settings】对新手很不友好,不好找.在设置页面的最下方.</p>
<p><img src="https://movejian.github.io/images/20220819/picgo3.png"></p>
<p>② 添加描述，然后将 repo 选上</p>
<p><img src="https://movejian.github.io/images/20220819/picgo4.png"></p>
<p>③ 将生成的字符串保存，关闭页面后将再也无法看到这个字符串了</p>
<p><img src="https://movejian.github.io/images/20220819/picgo5.png"></p>
<h2 id="三、picgo-配置"><a href="#三、picgo-配置" class="headerlink" title="三、picgo 配置"></a>三、picgo 配置</h2><p>打开 vscode 的设置界面，搜索”picgo”定位到 picgo，具体配置如图：</p>
<p><img src="https://movejian.github.io/images/20220819/picgo6.png"></p>
<p>配置picgo</p>
<p><img src="https://movejian.github.io/images/20220819/picgo7.png"></p>
<ol>
<li><p>current 设置为 GitHub</p>
</li>
<li><p>Branch 是我们仓库的分支，默认为 main</p>
</li>
<li><p>custom url 使我们图片上传的连接，有两种方式可以使用</p>
<ol>
<li>原生方式<br>使用 GitHub 原生连接，格式为： <a href="https://raw.githubusercontent.com/[%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]/[%E5%88%86%E6%94%AF%E5%90%8D]">https://raw.githubusercontent.com/[用户名]/[仓库名]/[分支名]</a><br>我的例子：<a href="https://raw.githubusercontent.com/misswenzi/gallery/main">https://raw.githubusercontent.com/misswenzi/gallery/main</a><br>原生方式有一个弊端就是，国内速度比较慢</li>
<li>cdn 加速方式<br>格式为：<a href="https://cdn.jsdelivr.net/gh/[%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]@[%E5%88%86%E6%94%AF%E5%90%8D]">https://cdn.jsdelivr.net/gh/[用户名]/[仓库名]@[分支名]</a><br>我的例子：<a href="https://cdn.jsdelivr.net/gh/misswenzi/gallery@main">https://cdn.jsdelivr.net/gh/misswenzi/gallery@main</a></li>
</ol>
</li>
<li><p>cdn 加速的优点是国内访问速度比较快</p>
</li>
<li><p>path 是我们的图片存储在仓库中的路径，比如我的是 blogs&#x2F;pictures&#x2F;（注意：pictures 后面的 “&#x2F;“ 要记得加上）<br>Repo 是我们的仓库，比如我的是 misswenzi&#x2F;gallery</p>
</li>
<li><p>Token：即 GitHub 中获取的 Tokens</p>
</li>
</ol>
<h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>进入 vscode，新建一个 .md 文件，windows 下 【ctrl+alt+U】从剪贴板粘贴图片，【ctrl+alt+E】打开资源管理器，选择图片，如果上传成功，则搭建成功！</p>
<p><img src="https://movejian.github.io/images/20220819/picgo8.png"></p>
<p>此时，去 GitHub 对应的仓库下查看，可以看到上传成功的图片。</p>
<p>在 vscode 中插入的图片会上传到 GitHub 的仓库中，如果删除了仓库里面的图片，那你的 Markdown 里面的图片链接就会失效。</p>
<p><img src="https://movejian.github.io/movejian/images/main/blog/images/20220819100154.png" alt="20220819100154"></p>
<p>首先不提好用不好用,反正我这样配置失败了,还请高人指点!</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo域名解析的两种方法</title>
    <url>/2022/08/19/hexo%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想要在浏览器里面输入域名到达某个地址。必不可少的一步就是要告诉全世界的电脑，这个域名现在指向这个地方啦。<br>而这一步就是由 dns 服务器来负责的。<br>我们需要做的就是将域名与固定的 ip 地址绑定起来 (A)，或者是与某已有域名绑定起来（CNAME）.</p>
<p>下面我们以阿里云购买的域名为例</p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><h3 id="方法一（不推荐）"><a href="#方法一（不推荐）" class="headerlink" title="方法一（不推荐）"></a>方法一（不推荐）</h3><p>首先获取自己 github 的二级域名的 IP 地址，win­dows 下直接在 cmd 里 Ping 一下自己的博客就会得到 IP 地址：</p>
<span id="more"></span>

<p><img src="https://movejian.github.io/images/20220819/cmd.png"></p>
<p>我的 ip 是 185.199.111.153</p>
<p>下面通过 DNS 域名解析将购买的域名指向 github 的二级域名：user­name.github.io，<br>进入阿里云的管理控制台 - 云解析 DNS，进入域名的解析设置，将得到的 IP 地址填到记录值一栏，点击确定就 OK 了。填完以后的解析列表会出现：</p>
<p><img src="https://movejian.github.io/images/20220819/yumi.png"><br>记录值就是自己 github 的二级域名的 IP 地址。</p>
<p>方法二（推荐）<br>直接解析域名的 CNAME 记录到你的 Git 二级域名，不要使用方法一中的 A 记录，因为 ip 地址可能会一段时间之后会改变 (由于网络地址转换协议 NAT)，所以建议记录类型选择 CNAME 进行解析，记录值填的就是 user­name.github.io，比如：</p>
<p><img src="https://movejian.github.io/images/20220819/yumi2.png"></p>
<p>如果你只用 github 的二级域名作为博客的地址，那么线路类型选择默认就可以了。</p>
<h2 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h2><p>在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：<br>test­blog.top</p>
<p><img src="https://movejian.github.io/images/20220819/CNAME.png"></p>
<p>在 github 上面，打开 user­name.github.io 项目的（Set­tings）设置，然后在  Pages 选项,点击蓝色的按钮Add a domain 设置里填上购买的域名。比如：</p>
<p><img src="https://movejian.github.io/images/20220819/domain.png"></p>
<blockquote>
<p>现在即可通过原二级域名和新域名访问hexo博客啦。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
</search>
